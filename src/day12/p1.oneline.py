((product := __import__("itertools", globals(), locals(), ["product"], 0).product),(print := __import__("rich", globals(), locals(), ["print"], 0).print),(load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input), (solve := (lambda data: print(sum([[(t:=0), [[(new_spring := springs), [(new_spring := new_spring.replace("?", char, 1)) for char in combination], (t := t + ([len(i) for i in new_spring.split(".") if i] == [int(i) for i in actual.split(",")]))] for combination in ["".join(combination) for combination in product(".#", repeat=springs.count("?"))]], t][-1] for springs, actual in list(map(lambda line: line.split(), data))])))), load_input(__file__, solve) if __name__ == "__main__" else ...)
