((combinations := __import__("itertools", globals(), locals(), ["combinations"], 0).combinations), (load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input), (GALAXY := "#"), (EXPANSION := int(1e6)), (manhattan_distance := lambda start, target: abs(target[0] - start[0]) + abs(target[1] - start[1])), (solve := (lambda data: [(rows_without_g := [idx for idx, row in enumerate(data) if GALAXY not in row]), (cols_without_g := [idx for idx, col in enumerate(zip(*data)) if GALAXY not in col]), (galaxy_positions := []), [[[(cols_before := len(list(filter(lambda col: col < x, cols_without_g)))), (rows_before := len(list(filter(lambda row: row < y, rows_without_g)))), galaxy_positions.append(((x - cols_before) + (EXPANSION * cols_before), (y - rows_before) + (EXPANSION * rows_before)))] if col == GALAXY else ... for x, col in enumerate(row)] if GALAXY in row else ... for y, row in enumerate(data)], print(sum(manhattan_distance(start, target) for start, target in combinations(galaxy_positions, 2)))])), load_input(__file__, solve) if __name__ == "__main__" else ...)