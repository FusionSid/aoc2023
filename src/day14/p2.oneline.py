((print := __import__("rich", globals(), locals(), ["print"], 0).print),(itertools := __import__("itertools")),(load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input),(do_cycle := lambda data: tuple(transform(transform(transform(transform(data, "north"), "west"), "south"), "east"))), (transform := lambda data, direction: [(new_data := []), (process_block := lambda block: [(count_O := block.count("O")), (f"{'O'*count_O}{'.'*(len(block)-count_O)}" if direction in ["west", "north"] else f"{'.'*(len(block)-count_O)}{'O'*count_O}")][-1]), (data := list(zip(*data))) if direction in ["north", "south"] else ..., [new_data.append("#".join([process_block(block) for block in "".join(row_or_col).split("#")])) for row_or_col in data], list(zip(*new_data)) if direction in ["north", "south"] else new_data][-1]),(solve := (lambda data: [(cache := [tuple(data)]),(cycle_c := 0),[(_break := False),[[(cycle_c := (cycle_c + 1)),(data := do_cycle(data)),[(_break := True)] if data in cache else ...,cache.append(data) if not _break else ...,]for _ in itertools.takewhile(lambda _: not _break and True, itertools.count())],],(f := cache.index(data)),(data := cache[(1_000_000_000 - f) % (cycle_c - f) + f]),print(sum(row.count("O") * (len(data) - idx)for idx, row in enumerate(data))),])),load_input(__file__, solve) if __name__ == "__main__" else ...,)