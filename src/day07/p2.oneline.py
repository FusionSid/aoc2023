((Counter := __import__("collections", globals(), locals(), ["Counter"], 0).Counter), (permutations := __import__("itertools", globals(), locals(), ["permutations"], 0).permutations), (print := __import__("rich", globals(), locals(), ["print"], 0).print), (load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input), (jokerhandtype := lambda counter, hand: [(j_count := counter["J"]), 7 if j_count in [5, 4] else [(k := set(counter.keys())), k.remove("J"), (6 + int(counter[k.pop()] == 2))][-1] if j_count == 3 else [(max_hand := -1), [[(h := hand), [(h := h.replace("J", i, 1)) for i in p], (max_hand := max(max_hand, hand_type(h))),] for p in set(permutations([key for key in counter if key != "J"] * 2, j_count))], max_hand][-1]][-1]), (hand_type := lambda hand: [(counter := Counter(hand)), (counter_values := counter.values()), jokerhandtype(counter, hand) if "J" in hand else 3 if list(counter_values).count(2) == 2 else 5 if set(counter_values) == {3, 2} else next((_type for amt, _type in {5: 7, 4: 6, 3: 4, 2: 2, 1: 1}.items() if amt in counter_values), -1,)][-1]), (solve := (lambda data: [(hands := []), [[(ls := line.split()), (hand := ls[0]), (bid := int(ls[1])), hands.append([hand, hand_type(hand), bid])] for line in data], print(sum((x[2] * idx) for idx, x in enumerate(sorted(hands, key=lambda x: (x[1], [-("AKQT98765432J".index(c)) for c in x[0]])), start=1)))])), load_input(__file__, solve) if __name__ == "__main__" else ...,)