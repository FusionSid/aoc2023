[ (importlib := __import__("importlib")), (sys := importlib.import_module("sys")), (os := __import__("os", globals(), locals(), ["path"], 0)), (path := os.path), (rich := __import__("rich", globals(), locals(), ["print"], 0)), (print := rich.print), (itertools := importlib.import_module("itertools")), ( solve := ( lambda data: [ (seeds_to_plant := list(map(int, data[0].split(": ")[1].split()))), ( mapping_data := [ list(group) for key, group in itertools.groupby(data[2:], key=bool) if key ] ), (all_maps := {}), [ [ [ (all_maps.__setitem__(map_type, {})) if (map_type := map_t.split()[0]) not in all_maps else ..., ], [ [ (m_d := list(map(int, m.split()))), (src := m_d[0]), (dest := m_d[1]), (length := m_d[2]), (dest_range := (dest, dest + length)), (src_range := (src, src + length)), all_maps[map_type].__setitem__(dest_range, src_range), ] for m in maps ], ] for map_t, *maps in mapping_data ], (mln := float("inf")), [ [ (v := seed), [ [ (_break := False), [ [ [ (v := dest[1] - (src[1] - v)), (_break := True), ] if v >= src[0] and v <= src[1] else ... ] for src, dest in itertools.takewhile( lambda _: not _break, value.items() ) ], ] for value in all_maps.values() ], (mln := min(v, mln)), ] for seed in seeds_to_plant ], print(mln), ] ) ), [ (use_test := (len(sys.argv) == 2 and sys.argv[-1] == "--test")), ( input_path := path.join( path.dirname(__file__), "input.txt" if not use_test else "test.txt" ) ), (data := open(input_path).read().split("\n")), solve(data), ] if __name__ == "__main__" else ..., ]