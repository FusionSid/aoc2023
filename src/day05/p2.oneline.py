[(importlib := __import__("importlib")), (sys := importlib.import_module("sys")), (itertools := importlib.import_module("itertools")), (os := __import__("os", globals(), locals(), ["path"], 0)), (path := os.path), (rich := __import__("rich", globals(), locals(), ["print"], 0)), (print := rich.print), (intersection := lambda As, Ae, Bs, Be: (max(As, Bs), min(Ae, Be))), ( solve := ( lambda data: [ (seeds_to_plant := list(map(int, data[0].split(": ")[1].split()))), ( seeds_to_plant_pairs := [ [seeds_to_plant[i], seeds_to_plant[i] + seeds_to_plant[i + 1]] for i in range(0, len(seeds_to_plant), 2) ] ), ( mapping_data := [ list(group) for key, group in itertools.groupby(data[2:], key=bool) if key ] ), (all_maps := {}), [ [ [ (all_maps.__setitem__(map_type, {})) if (map_type := map_t.split()[0]) not in all_maps else ..., ], [ [ (m_d := list(map(int, m.split()))), (dest := m_d[0]), (src := m_d[1]), (length := m_d[2]), (dest_range := (dest, dest + length)), (src_range := (src, src + length)), all_maps[map_type].__setitem__(dest_range, src_range), ] for m in maps ], ] for map_t, *maps in mapping_data ], (minimum_number := 0), [ [ (answer_arr := []), [ [ (seed := seeds_to_plant_pairs.pop()), (start := seed[0]), (end := seed[1]), (_break := False), [ [ ( inter := intersection( start, end, dest_s, dest_e ) ), (inter_s := inter[0]), (inter_e := inter[1]), [ ( intersection_range := [ inter_s - dest_s + src_s, inter_e - dest_s + src_s, ] ), answer_arr.append(intersection_range), seeds_to_plant_pairs.append( [start, inter_s] ) if inter_s > start else ..., seeds_to_plant_pairs.append([end, inter_e]) if end > inter_e else ..., (_break := True), ] if inter_s < inter_e else ..., ] for (src_s, _), ( dest_s, dest_e, ) in itertools.takewhile( lambda _: not _break, map_d.items() ) ], ... if _break else answer_arr.append([start, end]), ] for _ in itertools.takewhile( lambda _: seeds_to_plant_pairs, itertools.count() ) ], (minimum_number := min(answer_arr)[0]), (seeds_to_plant_pairs := answer_arr), ] for map_d in all_maps.values() ], print(minimum_number), ] ) ), [ (use_test := (len(sys.argv) == 2 and sys.argv[-1] == "--test")), ( input_path := path.join( path.dirname(__file__), "input.txt" if not use_test else "test.txt" ) ), (data := open(input_path).read().split("\n")), solve(data), ] if __name__ == "__main__" else ..., ]
