((itertools := __import__("itertools")), (print := __import__("rich", globals(), locals(), ["print"], 0).print),(load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input),(NEIGHBOURS := {"7": (1, 0, 0, 1),"L": (0, 1, 1, 0),"J": (1, 0, 1, 0),"F": (0, 1, 0, 1),"-": (1, 1, 0, 0),"|": (0, 0, 1, 1),".": (0, 0, 0, 0),"S": (1, 1, 1, 1),}), (find_start := lambda data: [(res := (-1, -1)), [[(res := (x, y)) if col == "S" else ...] for y, row in enumerate(data) for x, col in enumerate(row)], res][-1]), (get_neighbours := lambda pos, node_type, data: [(x := pos[0]), (y:=pos[1]), (all_neighbour_positions := ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1))), (neighbours := [pos for pos, use_pos in zip(all_neighbour_positions, NEIGHBOURS[node_type]) if use_pos]), [n for n in neighbours if pos in get_neighbours(n, data[n[1]][n[0]], data)] if node_type == "S" else [(px, py) for px, py in neighbours if px >= 0 and px < len(data) and py >= 0 and py < len(data)]][-1]), (solve := (lambda data: [(visited := set()), (queue := [find_start(data)]), [[(node := queue.pop(0)), [[(queue.append(neighbour) if neighbour not in visited else ...), visited.add(node)] for neighbour in get_neighbours(node, data[node[1]][node[0]], data)]] for _ in itertools.takewhile(lambda _: queue, itertools.count())], print(len(visited) // 2)])), load_input(__file__, solve) if __name__ == "__main__" else ...,)