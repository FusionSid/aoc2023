((print := __import__("rich", globals(), locals(), ["print"], 0).print),(load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input), (hash_str := lambda string: [(cv := 0), [[(cv := cv + ord(c)), (cv := cv * 17), (cv := cv % 256)] for c in string], cv][-1]), (solve := (lambda data: [(hashmap := [[] for _ in range(256)]), (focal_lengths := {}), [[(label := instruction[:-1]), (box := hash_str(label)), hashmap[box].remove(label) if label in hashmap[box] else ...] if instruction.endswith("-") else [(ispl := instruction.split("=")), (label := ispl[0]), (box := hash_str(label)), (focal := int(ispl[1])), focal_lengths.__setitem__(label, focal), hashmap[box].append(label) if label not in hashmap[box] else ...] for instruction in data], (total := 0), (non_empty := {idx: box for idx, box in enumerate(hashmap, start=1) if box}), [[(total := total + (box * idx * focal_lengths[label])) for idx, label in enumerate(labels, start=1)] for box, labels in non_empty.items()], print(total)])), load_input(__file__, solve, ",") if __name__ == "__main__" else ...)