((print := __import__("rich", globals(), locals(), ["print"], 0).print),(itertools := __import__("itertools")),(load_input := __import__("loader", globals(), locals(), ["load_input"], 0).load_input), (find_energized :=  (lambda start, data: [[(paths := [start]), (visited := set()), (energized := set()), [[(path_data := paths.pop()), (x := path_data[0]), (y := path_data[1]), (direction := path_data[2]), (adj_positions := {0: (x, y - 1), 90: (x + 1, y), 180: (x, y + 1), 270: (x - 1, y)}), (next_pos := adj_positions[direction]), (next_posX := next_pos[0]), (next_posY := next_pos[1]), [(pos := data[next_posY][next_posX]), [visited.add((next_posX, next_posY, direction)), energized.add((next_posX, next_posY)), (moving_v := direction in [0, 180]), (moving_h := direction in [90, 270]), (paths.append((next_posX, next_posY, (direction + 90) % 360)) if moving_v else paths.append((next_posX, next_posY, (direction - 90) % 360))) if pos == "/" else ((paths.append((next_posX, next_posY, (direction - 90) % 360)) if moving_v else paths.append((next_posX, next_posY, (direction + 90) % 360))) if pos == "\\" else ([paths.append((next_posX, next_posY, 0)), paths.append((next_posX, next_posY, 180))] if pos == "|" and moving_h else [paths.append((next_posX, next_posY, 90)), paths.append((next_posX, next_posY, 270))] if pos == "-" and moving_v else paths.append((next_posX, next_posY, direction))))] if (next_posX, next_posY, direction) not in visited else ...] if not any((next_posY < 0, next_posY >= len(data), next_posX < 0, next_posX >= len(data[0]))) else ...] for _ in itertools.takewhile(lambda _: paths, itertools.count())]], len(energized)][-1])), (solve := (lambda data: [(max_energized := -1), (starts := []), [starts.extend([(-1, i, 90), (len(data[0]), i, 270), (i, -1, 180), (i, len(data), 0)]) for i in range(len(data))], [(max_energized := max(max_energized, find_energized(start, data))) for start in starts], print(max_energized),])), load_input(__file__, solve) if __name__ == "__main__" else ...)