[(importlib := __import__("importlib")),(sys := importlib.import_module("sys")),(collections := importlib.import_module("collections")),(os := __import__("os", globals(), locals(), ["path"], 0)),(path := os.path),(rich := __import__("rich", globals(), locals(), ["print"], 0)),(print := rich.print),(MAX := {"red": 12, "green": 13, "blue": 14}),(check := lambda all_cubes: all(value <= MAX[key] for key, value in dict(collections.Counter(all_cubes)).items())),(solve := (lambda data: [(total := 0),[[(game_splitted := game.strip().split(": ")),(subsets := game_splitted[1]),(subsets := subsets.split("; ")),(mr := 0),(mb := 0),(mg := 0),[[(cubes := map(str.split, set.split(", "))),(all_cubes := []),[all_cubes.extend(cube[1] for _ in range(int(cube[0])) ) for cube in cubes],(cube_count := collections.defaultdict(lambda: 0, dict(collections.Counter(all_cubes)))),(mr := max(mr, cube_count["red"])),(mb := max(mb, cube_count["blue"])),(mg := max(mg, cube_count["green"])),]for set in subsets],(total := total + mr * mb * mg),] for game in data ],print(total),][-1])),[(use_test := (len(sys.argv) == 2 and sys.argv[-1] == "--test")),(input_path := path.join(path.dirname(__file__), "input.txt" if not use_test else "test.txt")),(data := open(input_path).readlines()),solve(data), ] if __name__ == "__main__" else ...,]  # type: ignore
